"use strict";(self.webpackChunk_lavashark_website=self.webpackChunk_lavashark_website||[]).push([[6105],{726:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"getting-started","title":"Getting started","description":"Here is an example tutorial for using discord.js v14. If you\'re using an earlier version, please update it. The discord.js Guide provides resources to help you with the update process.","source":"@site/versioned_docs/version-1.3.3/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/docs/1.3.3/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/hmes98318/LavaShark/blob/main/apps/website/versioned_docs/version-1.3.3/getting-started.md","tags":[],"version":"1.3.3","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Server configuration","permalink":"/docs/1.3.3/server-config"},"next":{"title":"FAQ","permalink":"/docs/1.3.3/FAQ"}}');var t=r(4848),s=r(8453);const i={sidebar_position:3},o="Getting started",l={},c=[{value:"Initializing the LavaShark and discord.js library",id:"initializing-the-lavashark-and-discordjs-library",level:3},{value:"Registering events",id:"registering-events",level:3},{value:"Command configuration",id:"command-configuration",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"getting-started",children:"Getting started"})}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example tutorial for using discord.js v14. If you're using an earlier version, please update it. The ",(0,t.jsx)(n.a,{href:"https://discordjs.guide/",children:"discord.js Guide"})," provides resources to help you with the update process."]}),"\n",(0,t.jsx)(n.h3,{id:"initializing-the-lavashark-and-discordjs-library",children:"Initializing the LavaShark and discord.js library"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { Client, GatewayIntentBits } = require('discord.js');\r\nconst { LavaShark } = require('lavashark');\r\n\r\nconst TOKEN = 'your_token'; // Discord bot token\r\nconst prefix = '-';         // Command prefix\r\n\r\n\r\nconst client = new Client({\r\n    intents: [\r\n        GatewayIntentBits.Guilds,\r\n        GatewayIntentBits.GuildMessages,\r\n        GatewayIntentBits.MessageContent,\r\n        GatewayIntentBits.GuildVoiceStates,\r\n    ]\r\n});\r\n\r\nconst lavashark = new LavaShark({\r\n    nodes: [\r\n        {\r\n            id: 'Node 1',\r\n            hostname: 'localhost',\r\n            port: 2333,\r\n            password: 'youshallnotpass'\r\n        }\r\n    ],\r\n    sendWS: (guildId, payload) => { client.guilds.cache.get(guildId)?.shard.send(payload); }\r\n});\r\n\r\nclient.lavashark = lavashark;\r\nclient.login(TOKEN);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"registering-events",children:"Registering events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// -- LavaShark events --\r\n\r\n// Fired when a track starts playing\r\nclient.lavashark.on('trackStart', (player, track) => {\r\n    const channel = client.channels.cache.get(player.textChannelId);\r\n    channel.send(`Now playing \\`${track.title}\\``);\r\n});\r\n\r\n// Fired when the queue ends\r\nclient.lavashark.on('queueEnd', (player) => {\r\n    const channel = client.channels.cache.get(player.textChannelId);\r\n    channel.send(`Queue ended`);\r\n    player.destroy();\r\n});\r\n\r\n// This event is needed to catch any errors that occur on LavaShark\r\nclient.lavashark.on('error', (node, err) => {\r\n    console.error('[LavaShark]', `Error on node ${node.identifier}`, err.message);\r\n});\r\n\r\n\r\n// -- Client events --\r\n\r\nclient.on('ready', () => {\r\n    console.log('Ready!');\r\n\r\n    // Starts the lavashark & connects to all lavalink nodes\r\n    client.lavashark.start(client.user.id);\r\n});\r\n\r\n// -- REQUIRED --\r\nclient.on('raw', (packet) => client.lavashark.handleVoiceUpdate(packet));\r\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"command-configuration",children:"Command configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"client.on('messageCreate', async message => {\r\n    if (message.author.bot) return;\r\n    if (message.content.indexOf(prefix) !== 0) return;\r\n\r\n\r\n    const args = message.content.slice(prefix.length).trim().split(/ +/g);\r\n    const command = args.shift().toLowerCase();\r\n\r\n    if (!message.member.voice.channel)\r\n        return message.reply('\u274c | You are not connected to an audio channel.');\r\n\r\n    if (message.guild.members.me.voice.channel && message.member.voice.channelId !== message.guild.members.me.voice.channelId)\r\n        return message.reply('\u274c | You are not on the same audio channel as me.');\r\n\r\n\r\n    console.log('--', command);\r\n\r\n    if (command === 'play') {\r\n        const track = args[0];\r\n\r\n        const res = await client.lavashark.search(track);\r\n\r\n        if (res.loadType === \"LOAD_FAILED\") {\r\n            console.log(`Search Error: ${res.exception.message}`);\r\n            return message.reply('\u274c | Not found music.');\r\n        }\r\n        else if (res.loadType === \"NO_MATCHES\") {\r\n            console.log(`Search Error: NO_MATCHES`);\r\n            return message.reply('\u274c | No matches.');\r\n        }\r\n\r\n        // Creates the audio player\r\n        const player = client.lavashark.createPlayer({\r\n            guildId: message.guild.id,\r\n            voiceChannelId: message.member.voice.channelId,\r\n            textChannelId: message.channel.id,\r\n            selfDeaf: true\r\n        });\r\n\r\n        try {\r\n            await player.connect(); // Connects to the voice channel\r\n        } catch (error) {\r\n            console.log(error);\r\n            return message.reply({ content: `\u274c | I can't join audio channel.`, allowedMentions: { repliedUser: false } });\r\n        }\r\n\r\n        if (res.loadType === 'PLAYLIST_LOADED') {\r\n            player.addTracks(res.tracks, message.author);\r\n\r\n            message.reply(`Playlist \\`${res.playlistInfo.name}\\` loaded!`);\r\n        }\r\n        else {\r\n            const track = res.tracks[0];\r\n            player.addTracks(res.tracks[0], message.author);\r\n            message.reply(`Added \\`${track.title}\\``);\r\n        }\r\n\r\n        if (!player.playing) await player.play();\r\n    }\r\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var a=r(6540);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);